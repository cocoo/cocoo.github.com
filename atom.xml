<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cocoo Blog]]></title>
  <link href="http://cocoo.github.com/atom.xml" rel="self"/>
  <link href="http://cocoo.github.com/"/>
  <updated>2013-03-14T09:39:23+08:00</updated>
  <id>http://cocoo.github.com/</id>
  <author>
    <name><![CDATA[cocoo]]></name>
    <email><![CDATA[cocoo.dai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mxgraph笔记5【参数说明】]]></title>
    <link href="http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji-5/"/>
    <updated>2013-03-07T16:10:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji-5</id>
    <content type="html"><![CDATA[<h3>mxStylesheet内参数说明</h3>

<pre><code>&lt;mxStylesheet as="stylesheet"&gt;
    &lt;add as="text"&gt; &lt;!-- 指定为text追加样式 --&gt;
        &lt;add as="shape" value="rectangle"/&gt;
        &lt;add as="perimeter" value="trianglePerimeter"/&gt;
        &lt;add as="fontSize" value="12"/&gt;
        &lt;add as="align" value="left"/&gt;
        &lt;add as="verticalAlign" value="top"/&gt;
        &lt;add as="shadow" value="0"/&gt;
        &lt;add as="strokeColor" value="none"/&gt;
        &lt;add as="fillColor" value="none"/&gt;
        &lt;add as="gradientColor" value="none"/&gt;
    &lt;/add&gt;
&lt;/mxStylesheet&gt;
</code></pre>

<ul>
<li>perimeter:连接点类型，可选的由ellipsePerimeter，rectanglePerimeter，rhombusPerimeter，trianglePerimeter</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mxgraph笔记2【xml配置】]]></title>
    <link href="http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji2/"/>
    <updated>2013-03-07T13:05:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji2</id>
    <content type="html"><![CDATA[<p>在mxgraph中可以使用mxEditor读取xml格式的配置，通过xml定义构建toolbar，graph，shape等。</p>

<!--more-->


<h3>xml文件格式说明：</h3>

<pre><code>&lt;mxEditor defaultGroup="group" defaultEdge="connector"&gt;
&lt;!-- 
    The following line is used to dynamically add a configuration hook for various backends.
    The hook must have an ASP.NET extension because IIS does not handle any other extensions.
    In the Dotnet and Java server examples, this hook is implemented so that it returns the
    required configuration for using a backend, namely, the diagrameditor-backend.xml 
    in the java and dotnet directories, respectively.
 --&gt;
    &lt;!-- 引入按键绑定和右键弹出定义 --&gt;
    &lt;include name="config/editor-commons.xml"/&gt;
    &lt;!-- 定义onInit --&gt;
    &lt;add as="onInit"&gt;&lt;![CDATA[
        function ()
        {
            onInit(this);
        }
    ]]&gt;&lt;/add&gt;
    &lt;!-- 页面ui绑定 --&gt;
    &lt;ui&gt;
        &lt;add as="graph" element="graph"/&gt;
        &lt;add as="status" element="status"/&gt;
        &lt;add as="toolbar" element="toolbar"/&gt;
    &lt;/ui&gt;
    &lt;!-- 定义各形状初始化时的值 --&gt;
    &lt;Array as="templates"&gt;
        &lt;add as="group"&gt;
            &lt;Group label="" href=""&gt;
                &lt;mxCell vertex="1" style="group" connectable="0"/&gt;
            &lt;/Group&gt;
        &lt;/add&gt;
        &lt;add as="connector"&gt;
            &lt;Connector label="" href=""&gt;
                &lt;mxCell edge="1"&gt;
                    &lt;mxGeometry as="geometry" relative="1"/&gt;
                &lt;/mxCell&gt;
            &lt;/Connector&gt;
        &lt;/add&gt;
        &lt;add as="container"&gt;
            &lt;Container label="Container" href=""&gt;
                &lt;mxCell vertex="1" style="swimlane" connectable="0"&gt;
                    &lt;mxGeometry as="geometry" width="200" height="200"/&gt;
                &lt;/mxCell&gt;
            &lt;/Container&gt;
        &lt;/add&gt;
        &lt;add as="rectangle"&gt;
            &lt;Rect label="Rectangle" href=""&gt;
                &lt;mxCell vertex="1"&gt; 
                    &lt;mxGeometry as="geometry" width="80" height="40"/&gt;
                &lt;/mxCell&gt;
            &lt;/Rect&gt;
        &lt;/add&gt;
        &lt;add as="text"&gt;
            &lt;Text label="Text Here" href=""&gt;
                &lt;mxCell vertex="1" style="text"&gt;    
                    &lt;mxGeometry as="geometry" width="80" height="20"/&gt;
                &lt;/mxCell&gt;
            &lt;/Text&gt;
        &lt;/add&gt;
        &lt;add as="image"&gt;
            &lt;Image label="" href=""&gt;
                &lt;mxCell vertex="1" style="image"&gt;   
                    &lt;mxGeometry as="geometry" width="80" height="50"/&gt;
                &lt;/mxCell&gt;
            &lt;/Image&gt;
        &lt;/add&gt;
        &lt;add as="rounded"&gt;
            &lt;Roundrect label="Rounded" href=""&gt;
                &lt;mxCell vertex="1" style="rounded"&gt;     
                    &lt;mxGeometry as="geometry" width="80" height="40"/&gt;
                &lt;/mxCell&gt;
            &lt;/Roundrect&gt;
        &lt;/add&gt;
        &lt;add as="shape"&gt;
            &lt;Shape label="Shape" href=""&gt;
                &lt;mxCell vertex="1" style="ellipse"&gt;     
                    &lt;mxGeometry as="geometry" width="60" height="60"/&gt;
                &lt;/mxCell&gt;
            &lt;/Shape&gt;
        &lt;/add&gt;
        &lt;add as="actor"&gt;
            &lt;Shape label="Shape" href=""&gt;
                &lt;mxCell vertex="1" style="actor"&gt;       
                    &lt;mxGeometry as="geometry" width="40" height="60"/&gt;
                &lt;/mxCell&gt;
            &lt;/Shape&gt;
        &lt;/add&gt;
        &lt;add as="cloud"&gt;
            &lt;Shape label="Shape" href=""&gt;
                &lt;mxCell vertex="1" style="cloud"&gt;       
                    &lt;mxGeometry as="geometry" width="80" height="60"/&gt;
                &lt;/mxCell&gt;
            &lt;/Shape&gt;
        &lt;/add&gt;
        &lt;add as="hline"&gt;
            &lt;Shape label="" href=""&gt;
                &lt;mxCell vertex="1" style="ellipse"&gt;     
                    &lt;mxGeometry as="geometry" width="60" height="10"/&gt;
                &lt;/mxCell&gt;
            &lt;/Shape&gt;
        &lt;/add&gt;
    &lt;/Array&gt;
    &lt;mxGraph as="graph" alternateEdgeStyle="verticalConnector" allowLoops="1" dropEnabled="1"&gt;
        &lt;add as="isAutoSizeCell"&gt;&lt;![CDATA[
            function(cell)
            {
                return mxUtils.isNode(this.model.getValue(cell), 'text');
            }
        ]]&gt;&lt;/add&gt;
        &lt;add as="isSwimlane"&gt;&lt;![CDATA[
            function (cell)
            {
                return mxUtils.isNode(this.model.getValue(cell), 'container');
            }
        ]]&gt;&lt;/add&gt;
        &lt;add as="getTooltipForCell"&gt;&lt;![CDATA[
            function(cell)
            {
                return '&lt;b&gt;'+cell.getAttribute('label')+
                        '&lt;/b&gt; ('+cell.getId()+')'+
                        '&lt;br&gt;Style: '+cell.getStyle()+
                        '&lt;br&gt;Connections: '+cell.getEdgeCount()+
                        '&lt;br&gt;Children: '+cell.getChildCount();
            }
        ]]&gt;&lt;/add&gt;
        &lt;add as="convertValueToString"&gt;&lt;![CDATA[
            function(cell)
            {
                return cell.getAttribute('label');
            }
        ]]&gt;&lt;/add&gt;
        &lt;!-- 各Shape的样式 --&gt;
        &lt;mxStylesheet as="stylesheet"&gt;
            &lt;add as="text"&gt;
                &lt;add as="shape" value="rectangle"/&gt;
                &lt;add as="perimeter" value="rectanglePerimeter"/&gt;
                &lt;add as="fontSize" value="12"/&gt;
                &lt;add as="align" value="left"/&gt;
                &lt;add as="verticalAlign" value="top"/&gt;
                &lt;add as="shadow" value="0"/&gt;
                &lt;add as="strokeColor" value="none"/&gt;
                &lt;add as="fillColor" value="none"/&gt;
                &lt;add as="gradientColor" value="none"/&gt;
            &lt;/add&gt;
            &lt;add as="defaultVertex" extend="text"&gt;
                &lt;add as="shape" value="rectangle"/&gt;
                &lt;add as="fontSize" value="11"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="middle"/&gt;
                &lt;add as="shadow" value="1"/&gt;
                &lt;add as="strokeColor" value="#C3D9FF"/&gt;
                &lt;add as="fillColor" value="#C3D9FF"/&gt;
                &lt;add as="gradientColor" value="white"/&gt;
            &lt;/add&gt;
            &lt;add as="group"&gt;
                &lt;add as="shape" value="rectangle"/&gt;
                &lt;add as="perimeter" value="rectanglePerimeter"/&gt;
                &lt;add as="fontSize" value="10"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="middle"/&gt;
                &lt;add as="strokeColor" value="gray"/&gt;
                &lt;add as="dashed" value="1"/&gt;
            &lt;/add&gt;
            &lt;add as="defaultEdge"&gt;
                &lt;add as="shape" value="connector"/&gt;
                &lt;add as="fontSize" value="10"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="middle"/&gt;
                &lt;add as="rounded" value="1"/&gt;
                &lt;add as="labelBackgroundColor" value="white"/&gt;
                &lt;add as="strokeColor" value="#36393D"/&gt;
                &lt;add as="strokeWidth" value="1"/&gt;
                &lt;add as="edgeStyle" value="elbowEdgeStyle"/&gt;
                &lt;add as="endArrow" value="classic"/&gt;
            &lt;/add&gt;
            &lt;add as="verticalConnector"&gt;
                &lt;add as="elbow" value="vertical"/&gt;
            &lt;/add&gt;
            &lt;add as="straightConnector"&gt;
                &lt;add as="shape" value="connector"/&gt;
                &lt;add as="endArrow" value="classic"/&gt;
                &lt;add as="edgeStyle"&gt;null&lt;/add&gt;
            &lt;/add&gt;
            &lt;add as="arrowConnector"&gt;
                &lt;add as="shape" value="arrow"/&gt;
                &lt;add as="fillColor" value="#C3D9FF"/&gt;
                &lt;add as="endSize" value="20"/&gt;
                &lt;remove as="edgeStyle"/&gt;
            &lt;/add&gt;
            &lt;add as="swimlane"&gt;
                &lt;add as="shape" value="swimlane"/&gt;
                &lt;add as="shadow" value="0"/&gt;
                &lt;add as="startSize" value="23"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="top"/&gt;
                &lt;add as="strokeColor" value="#EEEEEE"/&gt;
                &lt;add as="fillColor" value="#D4D4D4"/&gt;
            &lt;/add&gt;
            &lt;add as="rounded"&gt;
                &lt;add as="rounded" value="1"/&gt;
            &lt;/add&gt;
            &lt;add as="ellipse"&gt;
                &lt;add as="shape" value="ellipse"/&gt;
                &lt;add as="perimeter" value="ellipsePerimeter"/&gt;
                &lt;add as="strokeColor" value="#CDEB8B"/&gt;
                &lt;add as="fillColor" value="#CDEB8B"/&gt;
            &lt;/add&gt;
            &lt;add as="doubleEllipse" extend="ellipse"&gt;
                &lt;add as="shape" value="doubleEllipse"/&gt;
            &lt;/add&gt;
            &lt;add as="rhombus"&gt;
                &lt;add as="shape" value="rhombus"/&gt;
                &lt;add as="perimeter" value="rhombusPerimeter"/&gt;
                &lt;add as="strokeColor" value="#FFCF8A"/&gt;
                &lt;add as="fillColor" value="#FFCF8A"/&gt;
            &lt;/add&gt;
            &lt;add as="triangle" extend="rhombus"&gt;
                &lt;add as="shape" value="triangle"/&gt;
                &lt;add as="perimeter" value="trianglePerimeter"/&gt;
                &lt;add as="align" value="left"/&gt;
            &lt;/add&gt;
            &lt;add as="hexagon"&gt;
                &lt;add as="shape" value="hexagon"/&gt;
            &lt;/add&gt;
            &lt;add as="actor"&gt;
                &lt;add as="shape" value="actor"/&gt;
                &lt;add as="strokeColor" value="#FFC7C7"/&gt;
                &lt;add as="fillColor" value="#FFC7C7"/&gt;
            &lt;/add&gt;
            &lt;add as="cloud"&gt;
                &lt;add as="shape" value="cloud"/&gt;
                &lt;add as="perimeter" value="ellipsePerimeter"/&gt;
                &lt;add as="strokeColor" value="#CDEB8B"/&gt;
                &lt;add as="fillColor" value="#CDEB8B"/&gt;
            &lt;/add&gt;
            &lt;add as="cylinder"&gt;
                &lt;add as="shape" value="cylinder"/&gt;
                &lt;add as="spacingTop" value="10"/&gt;
                &lt;add as="strokeColor" value="#4096EE"/&gt;
                &lt;add as="fillColor" value="#4096EE"/&gt;
            &lt;/add&gt;
            &lt;add as="hline"&gt;
                &lt;add as="shape" value="line"/&gt;
                &lt;add as="strokeWidth" value="3"/&gt;
                &lt;add as="perimeter" value="rectanglePerimeter"/&gt;
                &lt;add as="fontColor" value="black"/&gt;
                &lt;add as="fontSize" value="10"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="bottom"/&gt;
                &lt;add as="strokeColor" value="#36393D"/&gt;
            &lt;/add&gt;
            &lt;add as="image"&gt;
                &lt;add as="shape" value="image"/&gt;
                &lt;add as="perimeter" value="rectanglePerimeter"/&gt;
                &lt;add as="fontSize" value="10"/&gt;
                &lt;add as="align" value="center"/&gt;
                &lt;add as="verticalAlign" value="middle"/&gt;
                &lt;add as="image" value="images/draw/mxlogo.jpg"/&gt;
            &lt;/add&gt;
        &lt;/mxStylesheet&gt;
        &lt;mxGraphModel as="model"&gt;
            &lt;add as="valueForCellChanged"&gt;&lt;![CDATA[
                function(cell, value)
                {
                    var previous = null;

                    if (value == null || isNaN(value.nodeType))
                    {
                        previous = cell.value.getAttribute('label');

                        if (value == null)
                        {
                            cell.value.removeAttribute('label');
                        }
                        else
                        {
                            cell.setAttribute('label', value);
                        }
                    }
                    else
                    {
                        previous = cell.value;
                        cell.value = value;
                    }

                    return previous;
                }
            ]]&gt;&lt;/add&gt;
            &lt;root&gt;
                &lt;Diagram label="My Diagram" href="http://www.mxgraph.com/" id="0"&gt;
                    &lt;mxCell/&gt;
                &lt;/Diagram&gt;
                &lt;Layer label="Default Layer" id="1"&gt;
                    &lt;mxCell parent="0"/&gt;
                &lt;/Layer&gt;
            &lt;/root&gt;
        &lt;/mxGraphModel&gt;
    &lt;/mxGraph&gt;
    &lt;!-- toolbar定义 --&gt;
    &lt;mxDefaultToolbar as="toolbar"&gt;
        &lt;add as="connect" mode="connect" icon="images/connect.gif"&gt;&lt;![CDATA[
            function (editor)
            {
                if (editor.defaultEdge != null)
                {
                    editor.defaultEdge.style = null;
                }
            }
        ]]&gt;&lt;/add&gt;
        &lt;add as="connect" mode="connect" icon="images/straight.gif"&gt;&lt;![CDATA[
            function (editor)
            {
                if (editor.defaultEdge != null)
                {
                    editor.defaultEdge.style = 'straightConnector';
                }
            }
        ]]&gt;&lt;/add&gt;
        &lt;add as="connect" mode="connect" icon="images/arrow.gif"&gt;&lt;![CDATA[
            function (editor)
            {
                if (editor.defaultEdge != null)
                {
                    editor.defaultEdge.style = 'arrowConnector';
                }
            }
        ]]&gt;&lt;/add&gt;
        &lt;br/&gt;&lt;br/&gt;
        &lt;add as="Text" template="text" icon="images/text.gif"/&gt;
        &lt;add as="Container" template="container" icon="images/swimlane.gif"/&gt;
        &lt;add as="Rectangle" template="rectangle" icon="images/rectangle.gif"/&gt;
        &lt;add as="Rounded" template="rounded" icon="images/rounded.gif"/&gt;
        &lt;add as="Ellipse" template="shape" style="ellipse" icon="images/ellipse.gif"/&gt;
        &lt;add as="Double Ellipse" template="shape" style="doubleEllipse" icon="images/doubleellipse.gif"/&gt;
        &lt;add as="Rhombus" template="shape" style="rhombus" icon="images/rhombus.gif"/&gt;
        &lt;add as="Triangle" template="actor" style="triangle" icon="images/triangle.gif"/&gt;
        &lt;add as="Hexagon" template="cloud" style="hexagon" icon="images/hexagon.gif"/&gt;
        &lt;add as="Actor" template="actor" style="actor" icon="images/actor.gif"/&gt;
        &lt;add as="Cylinder" template="shape" style="cylinder" icon="images/cylinder.gif"/&gt;
        &lt;add as="Cloud" template="cloud" style="cloud" icon="images/cloud.gif"/&gt;
        &lt;add as="Line" template="hline" style="hline" icon="images/hline.gif"/&gt;
        &lt;add as="Image" template="image" icon="images/image.gif"/&gt;
    &lt;/mxDefaultToolbar&gt;
&lt;/mxEditor&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mxgraph笔记4【shape】]]></title>
    <link href="http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji4/"/>
    <updated>2013-03-07T12:54:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/03/07/mxgraphbi-ji4</id>
    <content type="html"><![CDATA[<p>在mxgraph中，要实现一个自定义的图形使非常容易的。只需要：
*   继承mxShape
*   覆盖redrawPath方法
*   注册自定义的图形</p>

<!--more-->


<p>例子</p>

<pre><code>/**
 * Class: NoteShape
 * 
 * Implementation of the noteShape shape.
 *
 * Note Shape, supports size style
 * 
 * Constructor: NoteShape
 *
 * Constructs a new noteShape shape.
 */
function NoteShape() { };
/**
 * Extends &lt;mxCylinder&gt;.
 */
NoteShape.prototype = new mxCylinder();

NoteShape.prototype.constructor = NoteShape;
NoteShape.prototype.size = 30;

/**
 * Function: redrawPath
 *
 * Draws the path for this shape. This method uses the &lt;mxPath&gt;
 * abstraction to paint the shape for VML and SVG.
 */
NoteShape.prototype.redrawPath = function(path, x, y, w, h, isForeground)
{
    var s = Math.min(w, Math.min(h, mxUtils.getValue(this.style, 'size', this.size) * this.scale));

    if (isForeground)
    {
        path.moveTo(w - s, 0);
        path.lineTo(w - s, s);
        path.lineTo(w, s);
        path.end();
    }
    else
    {
        path.moveTo(0, 0);
        path.lineTo(w - s, 0);
        path.lineTo(w, s);
        path.lineTo(w, h);
        path.lineTo(0, h);
        path.lineTo(0, 0);
        path.close();
        path.end();
    }
};
// Register the NoteShape with note
mxCellRenderer.prototype.defaultShapes['note'] = NoteShape;
</code></pre>

<p>使用，这里直接给出在xml中使用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mxgraph笔记3【toolbar】]]></title>
    <link href="http://cocoo.github.com/blog/2013/03/05/mxgraphbi-ji3/"/>
    <updated>2013-03-05T13:37:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/03/05/mxgraphbi-ji3</id>
    <content type="html"><![CDATA[<p>用给定的dom元素创建一个toolbar，这个toolbar可能包含icons，buttons和combo boxes</p>

<!--more-->


<p>例子</p>

<pre><code>&lt;div id="sidebar"&gt;
    &lt;ul style="display: block;"&gt;
        &lt;li class="submenu"&gt;
            &lt;a href="#"&gt; &lt;i class="icon icon-white icon-inbox"&gt;&lt;/i&gt;
                &lt;span&gt;基本&lt;/span&gt;
                &lt;span class="label"&gt;3&lt;/span&gt;
            &lt;/a&gt;
            &lt;ul id="toolbar-basic"&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li class="submenu"&gt;
            &lt;a href="#"&gt; &lt;i class="icon icon-white icon-th-list"&gt;&lt;/i&gt;
                &lt;span&gt;图形&lt;/span&gt;
                &lt;span class="label"&gt;3&lt;/span&gt;
            &lt;/a&gt;
            &lt;ul id="toolbar-shpae"&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
...
// Creates the div for the toolbar basic
var containerBasic = document.getElementById('toolbar-basic');

var toolbarBasic = new mxToolbar(containerBasic);
toolbarBasic.enabled = false;

new mxDivResizer(containerBasic);

// Creates the div for the toolbar basic
var containerShape = document.getElementById('toolbar-shape');

var toolbarShape = new mxToolbar(containerShape);
toolbarShape.enabled = false;

new mxDivResizer(containerShape);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mxgraph笔记1【简介】]]></title>
    <link href="http://cocoo.github.com/blog/2013/03/04/mxgraphbi-ji1/"/>
    <updated>2013-03-04T14:53:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/03/04/mxgraphbi-ji1</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>mxGraph客户端是一个图形组件，并提供和网页集成的接口。。客户端需要一个Web服务器提供所需的文件，也可以在本地文件系统上运行。后台可用于集成到现有存在的服务器所支持的语言中
与后台配合后， 该组件可完成以下功能：</p>

<ul>
<li><p>创建类似visio的图库</p></li>
<li><p>存储加载图库</p></li>
<li><p>创建一个graph对象</p></li>
<li><p>与其他客户共享图库</p></li>
</ul>


<p>提交</p>

<!--more -->


<p>上述几种方式可以结合起来应用，如发送更改配置的XML文件到后台，或自动保存图形以免数据丢失。并且客户端可以本地化操作。</p>

<h2>例子 Hello, World!</h2>

<h3>引入库文件</h3>

<p>网页头部包含javascript代码和依赖关系。用以下代码来加载库文件。mxBasePath变量用来定义库资源的目录。这个变量必须在加载库前就定义好。</p>

<pre><code>&lt;script type="text/javascript"&gt;
  mxBasePath = 'javascript/src/';
&lt;/script&gt;
&lt;script type="text/javascript" src="javascript/src/js/mxClient.js"&gt;&lt;/script&gt;
</code></pre>

<p>mxClient.js包含全部所需代码。注意：资源代码仅仅商业发行。在评估版本中这个文件是一个来自服务器的URL链接。不可以本地化源代码。</p>

<h3>检查浏览器</h3>

<p>下一个script标签包含hello world的代码。代码的第一部分是检查浏览器是否支持mxgraph。 建议在编码前做这步，如果浏览器不支持就能在此显示错误信息。一般来说, js脚本代码应该和html代码分开，但这个例子中没这样做。</p>

<p>对于主函数function main（）{}没有什么特殊的规定。function引用头部加载的文件，并且可以有任何名称包含任何参数。在这个例子中参数是body中的dom节点。注意： 以下代码和dom节点的id无关</p>

<pre><code>&lt;script type="text/javascript";&gt;
function main(container)
{
  // Checks if the browser is supported
//检查浏览器是否支持
  if (!mxClient.isBrowserSupported())
  {
    // Displays an error message if the browser is not supported.
//如果浏览器不支持，则显示错误信息
    mxUtils.error('Browser is not supported!', 200, false);
  }
  ...
</code></pre>

<h2>Container 容器</h2>

<p>页面用一个dom节点将graph与javascript结合。它可以使用document.getElementById在body中取得（如这个例子）或者直接动态创建（如createElement， 译者注）。dom节点传递到主函数中用于建立以下graph例子。</p>

<p>如果你想让容器中有滚动条，那么将容器样式的属性 overflow 设为auto。</p>

<h2>Graph 图</h2>

<p>代码创建了一个空的graph图模型并通过容器和空的模型来构建具体的图。在这个例子中，所有默认事件处理在最后一行将失效。（mxgraph使用典型的MVC模式， 熟悉MVC模式的读者更容易上手。 译者注）</p>

<pre><code>var model = new mxGraphModel();
var graph = new mxGraph(container, model);
如果你希望graph图只读，可用 graph.setEnabed(false).
</code></pre>

<h2>Vertices （节点）and Edges（连线）</h2>

<p>程序需要在beginUpdate和endUpdate中来插入节点和连线（更新图形）。endUpdate应放在finally-block中以确保endUpdate一直执行。但beginUpdate不能在try-block中，这样如果beginUpdate失败那么endupdate永远不会执行。</p>

<p>块内的部分为图形创建节点和连线。默认的父节点是在用graph时无需参数自动创建在图中根节点的第一个子节点。</p>

<pre><code>// Gets the default parent for inserting new cells. This
// is normally the first child of the root (ie. layer 0).
//为插入节点获得默认的父节点。



  //这通常是根节点的第一个子节点
var parent = graph.getDefaultParent();

// Adds cells to the model in a single step
//在单独的一步中添加cell
model.beginUpdate();
try
{
  var v1 = graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30);
  var v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);
  var e1 = graph.insertEdge(parent, null, '', v1, v2);
}
finally
{
  // Updates the display
//更新显示
  model.endUpdate();
}
</code></pre>

<p>beginUpdate&amp;endUpdate不仅提供了显示功能，而且它能够当做undo/redo标记的边界（也就是说，beginUpdate和endUpdate之间操作会作为Undo、redo的原子操作，要么同时被redo或undo， 相当于数据库中的事务）</p>

<h2>Graphs 图</h2>

<p>将dom节点实例化为一个graph图：</p>

<pre><code>var node = document.getElementById('id-of-graph-container');
var graph = new mxGraph(node);
</code></pre>

<h2>Model 编程模型</h2>

<p>mxcell在mxGraphModel中实现了定义图模型的元素。
图模型有以下属性（包含关系）：
根节点包含各个层，各个层的父节点都是根节点。
层中可包含graph图模型的元素：节点、连线组。
组中可递归的包含graph图模型的元素。
graph图的结构和信息都存储在cell和用户对象中。（又名业务对象）</p>

<p>用一个根节点和默认的层来创建一个新的graph模型：</p>

<pre><code>var root = new mxCell();
root.insert(new mxCell());
var model = new mxGraphModel(root);
</code></pre>

<h2>Stylesheet 样式表</h2>

<p>cell的样式由样式表（mxStylesheet的实例）来决定。样式表规定了样式名称到样式之间的映射关系。一个样式是一个键的数组。那些键对应所用cell的值。值在mxConstants中定义，可以是字符串和数字、javascript对象、函数等 。 修改节点和连线的默认样式：</p>

<pre><code>var vertexStyle = graph.getStylesheet().getDefaultVertexStyle();
vertexStyle[mxConstants.ROUNDED] = true;

var edgeStyle = graph.getStylesheet().getDefaultEdgeStyle();
edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.TopToBottom;
</code></pre>

<h2>Styles 样式</h2>

<p>cell的样式在属性style中（cell.style）。样式是cell状态的一部分，它可以通mxGraphModel.setStyle来改变。style是form[stylename;|key=value;]中的一段字符串。默认样式可覆盖此cell的制定键值。例如：你用 rounded 样式，它可以覆盖 stroke和fillColor，样式被这样定义：</p>

<pre><code>[stylename;|key=value;]
</code></pre>

<h2>Appearance 显示外观</h2>

<p>在具体项目中你也许需要自定义cell的那些动态特性（就是外观），例如 图形、指针形状、颜色等。你可以分别用以下方法： getImage, getIndicatorShape, getIndicatorImage, getIndicatorColor ，getIndicatorGradientColor&#8230;。注意：这些方法作为一个参数，它指向一个cell的style&#8221;解决&#8221;（即数组）版本的cell状态。因此，对getImage默认实现如下所示：</p>

<pre><code>mxGraph.prototype.getImage = function(state)
{
  if (state != null &amp;&amp; state.style != null)
  {
    return state.style[mxConstants.STYLE_IMAGE];
  }
  return null;
}
</code></pre>

<p>这个方法可把cell的图形改成任何你需要的。通常，图像被定义为state.cell指向cell关联的状态或state.cell.value指向用户对象。
为了使改变可以显示出来，你需要调用view.invalidate(cell)和view.validate</p>

<h2>Editors 编辑器</h2>

<p>程序通过初始化mxEditor来创建编辑器。这是编辑器包的核心类。其他都是辅助类。可通过配置文件名称创建并配置一个编辑器。</p>

<p>请看下面的例子：</p>

<pre><code>var config = mxUtils.load('editors/config/keyhandler-commons.xml').getDocumentElement();
var editor = new mxEditor(config);
</code></pre>

<p>xml格式的配置文件会传递给mxCodec，mxCodec使用mxEditorCodec和其他编码将xml文件读入编辑器对象层次结构中。通常在编辑器开始构件时进行，graph, model, toolbar, popupmenus等用 I/O subsystem</p>

<h2>CSS</h2>

<p>Css样式表单包含多种用户接口元素（选择框，编辑器，弹出菜单等）的样式的定义。它也包含允许应用XML配置文件来支持IE的指令，因此页面中有大量的这种表单。</p>

<p>可以通过mxClient.link(&#8216;stylesheet&#8217;, filename)或者表单标签来配置编辑器。例：</p>

<pre><code>&lt;mxEditor&gt;
  &lt;ui&gt;
    &lt;stylesheet name="examples/editors/css/process.css"/&gt;
    ...
</code></pre>

<h2>Templates 模板</h2>

<p>按如下，通过在配置文件中的节点定义新的cell类型模板</p>

<pre><code>&lt;add as="symbol"&gt;
  &lt;Symbol label="Symbol" customAttribute="whatever"&gt;
    &lt;mxCell vertex="1" connectable="1" style="symbol;image=images/event.png"&gt;    
      &lt;mxGeometry as="geometry" width="32" height="32"/&gt;
    &lt;/mxCell&gt;
    &lt;CustomChild customAttribute="whatever"/&gt;
  &lt;/Symbol&gt;
&lt;/add&gt;
</code></pre>

<p>add元素的as属性包含模板上一次成功应用的名称，Symbol子节点元素是一个ie或者火狐的客户端元素，可以有任何名称和任意多的子节点以及客户属性。标签属性是对图形单元的文字表述。mxCell元素是另一个特殊的子节点包含cell的图像化信息，并命名其为 cell-type, -style, -size ， -position.等</p>

<h2>Toolbar</h2>

<p>按如下，必须通过在配置文件中配置mxDefaultToolbar节(mxEditor /mxDefaultToolbar[as=toolbar]) 来应用Toolbar模板。</p>

<pre><code>&lt;add as="symbolTool" template="symbol"
  style="symbol;image=wf/images/bpmn/special_event.png"
  icon="wf/images/bpmn/small_event.gif"/&gt;
</code></pre>

<p>as属性指定工具标签在工具栏中显示，template属性指定最先被加载的模板，style属性是可选的，用于重写默认的style。icon属性指定了toolbar自身的图形样式。
注：在这个symbolTool的例子中，as属性被规定为语言资源的键值。如果资源在mxResource中没有定义，那么属性值将被作为标签。</p>

<p>以上尽简单介绍，会在后续中详细讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux学习之crontab]]></title>
    <link href="http://cocoo.github.com/blog/2013/01/19/linuxxue-xi-zhi-crontab/"/>
    <updated>2013-01-19T21:35:00+08:00</updated>
    <id>http://cocoo.github.com/blog/2013/01/19/linuxxue-xi-zhi-crontab</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
